// Generated by CoffeeScript 1.7.1
(function() {
  var Car, DrunkenDriver, Game, MoveableRect, PickyPolice, Player, TeleportingTaxi,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  MoveableRect = (function() {
    function MoveableRect(height, width, color, x) {
      this.height = height != null ? height : 40;
      this.width = width != null ? width : 40;
      this.color = color != null ? color : 'black';
      this.x = x != null ? x : 0;
      this.$el = $('<div></div>').css({
        height: this.height + 'px',
        width: this.width + 'px',
        backgroundColor: this.color,
        marginLeft: this.x,
        position: 'absolute',
        bottom: 0
      });
      $('body').append(this.$el);
    }

    MoveableRect.prototype.move = function(x, duration) {
      this.x = x;
      if (duration == null) {
        duration = 0;
      }
      if (this.x > window.innerWidth - this.width) {
        this.x = 0;
      } else if (this.x < 0) {
        this.x = window.innerWidth - this.width;
      }
      return this.$el.animate({
        'margin-left': this.x + 'px'
      }, duration);
    };

    return MoveableRect;

  })();

  Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      Player.__super__.constructor.call(this, 40, 10, 'orange');
      this.speed = 1;
      $('body').keyup((function(_this) {
        return function(e) {
          return _this.speed = 1;
        };
      })(this));
      $('body').keydown((function(_this) {
        return function(e) {
          _this.speed++;
          if (e.keyCode === 37) {
            return _this.move(_this.x - _this.speed);
          } else if (e.keyCode === 39) {
            return _this.move(_this.x + _this.speed);
          }
        };
      })(this));
    }

    return Player;

  })(MoveableRect);

  Car = (function(_super) {
    __extends(Car, _super);

    function Car() {
      var args, duration, maxDist;
      maxDist = arguments[0], duration = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      this.maxDist = maxDist != null ? maxDist : 90;
      this.duration = duration != null ? duration : 2000;
      Car.__super__.constructor.apply(this, args);
      setInterval((function(_this) {
        return function() {
          var newX;
          newX = Math.floor(Math.random() * _this.maxDist);
          if (Math.random() < 0.5) {
            newX -= _this.x;
          } else {
            newX += _this.x;
          }
          return _this.move(newX, _this.duration);
        };
      })(this), this.duration);
    }

    return Car;

  })(MoveableRect);

  DrunkenDriver = (function(_super) {
    __extends(DrunkenDriver, _super);

    function DrunkenDriver() {
      DrunkenDriver.__super__.constructor.call(this, window.innerWidth, 2000, 50, 70, 'red', 90);
    }

    return DrunkenDriver;

  })(Car);

  TeleportingTaxi = (function(_super) {
    __extends(TeleportingTaxi, _super);

    function TeleportingTaxi() {
      TeleportingTaxi.__super__.constructor.call(this, window.innerWidth / 5, 500, 40, 50, 'yellow', 90);
    }

    return TeleportingTaxi;

  })(Car);

  PickyPolice = (function(_super) {
    __extends(PickyPolice, _super);

    function PickyPolice() {
      PickyPolice.__super__.constructor.call(this, window.innerWidth / 10, 2000, 25, 30, 'green', 90);
    }

    return PickyPolice;

  })(Car);

  Game = (function() {
    function Game() {
      this.player = new Player;
      this.drunkenDriver = new DrunkenDriver;
      this.teleportingTaxi = new TeleportingTaxi;
      this.PickyPolice = new PickyPolice;
    }

    return Game;

  })();

  $(function() {
    return new Game;
  });

}).call(this);
